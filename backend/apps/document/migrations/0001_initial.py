# Generated by Django 5.0.7 on 2024-07-27 12:46

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import simple_history.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DocumentAttachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, null=True)),
                ('is_dir', models.BooleanField(default=False)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'document_attachment',
            },
        ),
        migrations.CreateModel(
            name='DocumentAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_id', models.IntegerField(verbose_name='document.attribute.document_id')),
                ('value', models.TextField(blank=True, null=True)),
                ('value_data_meta', models.JSONField(default=dict)),
                ('value_operator', models.TextField(blank=True, null=True)),
                ('value_text', models.TextField(blank=True, null=True)),
                ('row_sq', models.IntegerField(blank=True, null=True)),
                ('row_uid', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'db_table': 'document_attribute',
            },
        ),
        migrations.CreateModel(
            name='DocumentNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('header', models.CharField(max_length=300, null=True)),
                ('text', models.TextField()),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'document_note',
            },
        ),
        migrations.CreateModel(
            name='DocumentReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('file_name', models.CharField(max_length=500)),
            ],
            options={
                'db_table': 'document_report',
            },
        ),
        migrations.CreateModel(
            name='DocumentScan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_name', models.CharField(max_length=300)),
                ('file_path', models.CharField(max_length=500)),
                ('ocr_text', models.TextField(blank=True, null=True)),
                ('sq', models.IntegerField()),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'document_scan',
            },
        ),
        migrations.CreateModel(
            name='DocumentSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('code', models.CharField(max_length=50)),
                ('class_name', models.CharField(max_length=500)),
            ],
            options={
                'db_table': 'document_source',
            },
        ),
        migrations.CreateModel(
            name='DocumentStatusCourse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('effective_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'document_status_course',
            },
        ),
        migrations.CreateModel(
            name='DocumentStatusTrack',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('effective_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('reason', models.TextField(default='standard.process.flow', null=True)),
            ],
            options={
                'db_table': 'document_status_track',
                'ordering': ['creation_date'],
            },
        ),
        migrations.CreateModel(
            name='DocumentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nazwa')),
                ('code', models.CharField(max_length=50, verbose_name='Kod')),
                ('owner_type', models.CharField(max_length=50)),
                ('auto_generated_code_pattern', models.CharField(blank=True, max_length=50, null=True, verbose_name='Pattern dla kodu automatycznego')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Opis')),
                ('avatar_image', models.CharField(blank=True, max_length=300, null=True, verbose_name='document.type.avatar_image')),
                ('icon_font_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='document.type.icon_font_name')),
                ('editable', models.BooleanField(default=True, verbose_name='document.type.editable')),
                ('is_schedule', models.BooleanField(default=False, verbose_name='Posiada harmonogram')),
                ('is_interest', models.BooleanField(default=False, verbose_name='Posiada zarzÄ…dzanie odsetkami')),
                ('is_product', models.BooleanField(default=False, verbose_name='document.type.is_product')),
                ('is_process_flow', models.BooleanField(verbose_name='document.type.is_process_flow')),
                ('is_shadow', models.BooleanField(verbose_name='document.type.is_shadow')),
                ('is_active', models.BooleanField(default=True, verbose_name='document.type.is_active')),
                ('is_code', models.BooleanField(verbose_name='document.type.is_code')),
                ('is_code_editable', models.BooleanField(verbose_name='document.type.is_code_editable')),
                ('is_owner', models.BooleanField(verbose_name='document.type.is_owner')),
                ('calculation_class', models.CharField(blank=True, max_length=500, null=True, verbose_name='document.type.calculation_class')),
                ('form_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='document.type.form_name')),
                ('form_attributes', models.JSONField(blank=True, null=True)),
                ('attributes', models.JSONField(blank=True, null=True)),
                ('model', models.JSONField(blank=True, null=True)),
                ('financial_rules', models.JSONField(blank=True, null=True)),
                ('settings', models.JSONField(blank=True, null=True)),
            ],
            options={
                'db_table': 'document_type',
                'default_permissions': ('add', 'change'),
            },
        ),
        migrations.CreateModel(
            name='DocumentTypeAccounting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sq', models.IntegerField()),
            ],
            options={
                'db_table': 'document_type_accounting',
            },
        ),
        migrations.CreateModel(
            name='DocumentTypeAccountingType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='document.type.accounting.type.name')),
                ('code', models.CharField(max_length=50, verbose_name='document.type.accounting.type.code')),
                ('description', models.TextField(blank=True, null=True)),
                ('direction', models.IntegerField(verbose_name='document.type.accounting.type.direction')),
                ('is_editable', models.BooleanField(default=True, verbose_name='document.type.accounting.type.is_editable')),
                ('is_accounting_order', models.BooleanField(default=True, verbose_name='document.type.accounting.type.is_accounting_order')),
                ('due_day_accounting_only', models.BooleanField(default=False, verbose_name='document.type.accounting.type.due_day_accounting_only')),
                ('min_value', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('subtypes', models.JSONField(default=dict)),
                ('sq', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'document_type_accounting_type',
            },
        ),
        migrations.CreateModel(
            name='DocumentTypeAssociate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=100)),
                ('class_name', models.CharField(max_length=100, null=True)),
            ],
            options={
                'db_table': 'document_type_associate',
            },
        ),
        migrations.CreateModel(
            name='DocumentTypeAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(default='ATTR', max_length=10, verbose_name='document.type.attribute.type')),
                ('name', models.CharField(max_length=300, verbose_name='document.type.attribute.name')),
                ('name_short', models.CharField(blank=True, max_length=50, null=True, verbose_name='document.type.attribute.name_short')),
                ('name_icon', models.JSONField(blank=True, default=dict, null=True)),
                ('code', models.CharField(blank=True, max_length=100, null=True, verbose_name='document.type.attribute.code')),
                ('width_prc', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(limit_value=1), django.core.validators.MaxValueValidator(limit_value=100)])),
                ('feature', models.JSONField(blank=True, default=dict, null=True)),
                ('css_class', models.CharField(blank=True, max_length=200, null=True, verbose_name='document.type.attribute.css_class')),
                ('selector_class', models.CharField(blank=True, max_length=200, null=True, verbose_name='document.type.attribute.selector_class')),
                ('lov', models.JSONField(blank=True, default=dict, null=True)),
                ('dependency', models.JSONField(blank=True, default=dict, null=True)),
                ('description', models.TextField(blank=True, null=True, verbose_name='document.type.attribute.description')),
                ('placeholder', models.CharField(blank=True, max_length=300, null=True, verbose_name='document.type.attribute.placeholder')),
                ('default_value', models.TextField(blank=True, null=True, verbose_name='document.type.attribute.default_value')),
                ('is_required', models.BooleanField(default=False, verbose_name='document.type.attribute.is_required')),
                ('is_table', models.BooleanField(default=False, verbose_name='document.type.attribute.is_table')),
                ('is_section', models.BooleanField(default=False, verbose_name='document.type.attribute.is_section')),
                ('is_column', models.BooleanField(default=False, verbose_name='document.type.attribute.is_column')),
                ('is_combo', models.BooleanField(default=False, verbose_name='document.type.attribute.is_combo')),
                ('is_active', models.BooleanField(default=True, verbose_name='document.type.attribute.is_active')),
                ('hierarchy', models.JSONField(blank=True, null=True)),
                ('container', models.CharField(blank=True, max_length=300, null=True)),
                ('sq', models.IntegerField(default=0, verbose_name='document.type.attribute.sq')),
            ],
            options={
                'db_table': 'document_type_attribute',
            },
        ),
        migrations.CreateModel(
            name='DocumentTypeAttributeFeature',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visible', models.BooleanField()),
                ('editable', models.BooleanField()),
                ('required', models.BooleanField()),
                ('value_operator', models.BooleanField(default=False)),
                ('permission', models.JSONField(blank=True, null=True)),
            ],
            options={
                'db_table': 'document_type_attribute_feature',
            },
        ),
        migrations.CreateModel(
            name='DocumentTypeAttributeMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mapped_name', models.CharField(max_length=200, verbose_name='document.type.attribute.mapping.mapped_name')),
                ('is_required', models.BooleanField(default=True, verbose_name='document.type.attribute.mapping.is_required')),
                ('default_value', models.CharField(max_length=500, null=True)),
                ('description', models.TextField(null=True)),
            ],
            options={
                'db_table': 'document_type_attribute_mapping',
            },
        ),
        migrations.CreateModel(
            name='DocumentTypeCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='document.category.name')),
                ('code', models.CharField(max_length=50, verbose_name='document.category.code')),
                ('description', models.TextField(blank=True, null=True, verbose_name='document.category.description')),
                ('avatar_image', models.CharField(blank=True, max_length=300, null=True, verbose_name='document.category.avatar_image')),
                ('attributes', models.JSONField(blank=True, null=True)),
                ('sq', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'document_type_category',
            },
        ),
        migrations.CreateModel(
            name='DocumentTypeProcessFlow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_note_required', models.BooleanField()),
                ('is_default', models.BooleanField(default=False)),
                ('sq', models.IntegerField()),
            ],
            options={
                'db_table': 'document_type_process_flow',
            },
        ),
        migrations.CreateModel(
            name='DocumentTypeReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='document.type.report.name')),
                ('html_template', models.TextField(blank=True, null=True, verbose_name='document.type.report.html_template')),
                ('is_manual', models.BooleanField(default=True, verbose_name='document.type.report.html_template')),
                ('sq', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'document_type_report',
            },
        ),
        migrations.CreateModel(
            name='DocumentTypeReportAttributeMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mapping', models.CharField(max_length=200)),
                ('idx', models.IntegerField(null=True)),
            ],
            options={
                'db_table': 'document_type_report_attribute_mapping',
            },
        ),
        migrations.CreateModel(
            name='DocumentTypeSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attributes', models.JSONField(blank=True, null=True)),
                ('name', models.CharField(max_length=100)),
                ('conditional_name_attribute', models.CharField(blank=True, max_length=200, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('view_type', models.CharField(default='BLOCK', max_length=10, verbose_name='document.type.section.view.type')),
                ('sq', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'document_type_section',
            },
        ),
        migrations.CreateModel(
            name='DocumentTypeSectionColumn',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200, null=True, verbose_name='attribute.section.column.panel_name')),
                ('lg_width', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='attribute.section.column.lg_width')),
                ('md_width', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='attribute.section.column.md_width')),
                ('sm_width', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='attribute.section.column.sm_width')),
                ('xs_width', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='attribute.section.column.xs_width')),
                ('sq', models.IntegerField(blank=True, verbose_name='attribute.section.column.sq')),
            ],
            options={
                'db_table': 'document_type_section_column',
                'ordering': ['section', 'sq'],
            },
        ),
        migrations.CreateModel(
            name='DocumentTypeStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='document.type.status.name')),
                ('code', models.CharField(max_length=10, verbose_name='document.type.status.code')),
                ('permission', models.CharField(max_length=200, verbose_name='document.type.status.permission')),
                ('is_initial', models.BooleanField(verbose_name='document.type.status.is_initial')),
                ('is_product', models.BooleanField(default=False, verbose_name='document.type.status.is_product')),
                ('is_active', models.BooleanField(default=True, verbose_name='document.type.status.is_active')),
                ('is_alternate', models.BooleanField(default=False, verbose_name='document.type.status.is_alternate')),
                ('is_required_validation', models.BooleanField(default=False, verbose_name='document.type.status.is_required_validation')),
                ('is_closing_process', models.BooleanField(default=False, verbose_name='document.type.status.is_closing_process')),
                ('can_revert', models.BooleanField(default=True, verbose_name='document.type.status.can_revert')),
                ('action_class', models.CharField(blank=True, max_length=300, null=True)),
                ('action', models.CharField(blank=True, max_length=300, null=True)),
                ('common_action', models.JSONField(null=True)),
                ('redirect', models.CharField(blank=True, max_length=200, null=True, verbose_name='document.type.redirect')),
                ('sq', models.IntegerField(default=0)),
                ('hierarchies', models.JSONField(null=True)),
                ('color', models.CharField(default='ffffff', max_length=8, verbose_name='document.type.status.can_revert')),
            ],
            options={
                'db_table': 'document_type_status',
                'permissions': (('list_document_status', 'permissions.app.document.status.list_document_status'),),
                'default_permissions': ('add', 'change'),
            },
        ),
        migrations.CreateModel(
            name='DocumentTypeStatusFlow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'document_type_status_flow',
            },
        ),
        migrations.CreateModel(
            name='DocumentTypeVersionDefinition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20)),
                ('status', models.CharField(max_length=3)),
                ('create_date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'document_type_version_definition',
            },
        ),
        migrations.CreateModel(
            name='HistoricalDocument',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('code', models.CharField(blank=True, max_length=50, null=True, verbose_name='document.code')),
                ('custom_code', models.CharField(blank=True, max_length=50, null=True, verbose_name='document.code')),
                ('creation_date', models.DateTimeField(blank=True, editable=False, verbose_name='document.creation_date')),
                ('description', models.TextField(blank=True, null=True, verbose_name='document.description')),
                ('form_data', models.JSONField(default=dict, null=True, verbose_name='document.form_data')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Dokument',
                'verbose_name_plural': 'historical Dokumenty',
                'db_table': 'h_document',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDocumentAttribute',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('document_id', models.IntegerField(verbose_name='document.attribute.document_id')),
                ('value', models.TextField(blank=True, null=True)),
                ('value_data_meta', models.JSONField(default=dict)),
                ('value_operator', models.TextField(blank=True, null=True)),
                ('value_text', models.TextField(blank=True, null=True)),
                ('row_sq', models.IntegerField(blank=True, null=True)),
                ('row_uid', models.CharField(blank=True, max_length=200, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical document attribute',
                'verbose_name_plural': 'historical document attributes',
                'db_table': 'h_document_attribute',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDocumentNote',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('header', models.CharField(max_length=300, null=True)),
                ('text', models.TextField()),
                ('creation_date', models.DateTimeField(blank=True, editable=False)),
                ('update_date', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical document note',
                'verbose_name_plural': 'historical document notes',
                'db_table': 'h_document_note',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, max_length=50, null=True, verbose_name='document.code')),
                ('custom_code', models.CharField(blank=True, max_length=50, null=True, verbose_name='document.code')),
                ('creation_date', models.DateTimeField(auto_now_add=True, verbose_name='document.creation_date')),
                ('description', models.TextField(blank=True, null=True, verbose_name='document.description')),
                ('form_data', models.JSONField(default=dict, null=True, verbose_name='document.form_data')),
                ('annex', models.OneToOneField(blank=True, db_column='id_annex', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='document_annex', to='document.document')),
                ('annexed_by', models.OneToOneField(blank=True, db_column='id_annexed_by', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='document_annexed_by', to='document.document')),
            ],
            options={
                'verbose_name': 'Dokument',
                'verbose_name_plural': 'Dokumenty',
                'db_table': 'document',
                'permissions': (('view:all', 'permissions.app.document.view.all'), ('view:department', 'permissions.app.document.view.department'), ('view:position', 'permissions.app.document.view.position'), ('view:own', 'permissions.app.document.view.own'), ('list:all', 'permissions.app.document.list.all'), ('list:department', 'permissions.app.document.list.department'), ('list:position', 'permissions.app.document.list.position'), ('list:own', 'permissions.app.document.list.own'), ('add:all', 'permissions.app.document.add.all'), ('add:department', 'permissions.app.document.add.department'), ('add:position', 'permissions.app.document.add.position'), ('add:own', 'permissions.app.document.add.own'), ('change:all', 'permissions.app.document.change.all'), ('change:department', 'permissions.app.document.change.department'), ('change:position', 'permissions.app.document.change.position'), ('change:own', 'permissions.app.document.change.own')),
                'default_permissions': (),
            },
        ),
    ]
